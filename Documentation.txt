These classes are, by default, set to use the ATMega8 chip and pin / 
register compatible devices. The amount of configuration needed for
other devices depends on the device itself - refer to the
corresponding technical sheet for specific details.

The classes are split into two namespaces: avr and data. Hardware
specific features such as serial or adc appear in the avr namespace
whereas data structures such as array or smart pointer classes are
in the data namespace.


Serial.hpp / Serial.cpp
----------------------

void Init(bool useInterrupt)
	Call this first to set up the uart registers. If useInterrupt
	is true then the USART_RXC_vect vector is called when a byte
	is received. Modify the vector in Serial.cpp to handle the
	data as necessary.

void Send(const T* data, uint32_t len)
	Sends an arbitrary array pointed to by data of type T and length
	len. Send() will attempt to serialise data in byte order if T is
	of any type with a size greater than one byte. For example:

	uint32_t intData[] = {12347, 22, 2298};
	Serial::Send(intData, 3u);

	will send:

	{00}{00}{30}{3B} {00}{00}{00}{16} {00}{00}{08}{FA}
	
uint8_t Receive()
	Blocking call; this function waits until there is a byte on the
	serial buffer to be read, and returns it when available. For a
	non-blocking version initialise the Serial class with useInterrupt
	set to true, and handle incoming data via the service routine
	defined in Serial.cpp
	
When the Serial class is initialised it also hooks stdio, so that
functions such as printf() will output a formatted ascii string directly
to the uart, which can be displayed in the RS232 terminal of any
connected devices. Simply undefine HOOK_IO is this beviour is not required



AnalogueIn.hpp / AnalogueIn.cpp
-------------------------------

void Init()
	Sets up the ADC of the ATMega. Must be called before attempting to
	read any of the ADC pins.
	
void SetReference(Reference ref)
	Sets the source of the ADC reference voltage. External uses the
	voltage at the AREF pin, Internal uses the internal 2.56v reference

uint16_t GetValue(uint8_t pin)
	Returns the reading at pin where pin is the ID of the ADC channel to
	read


Clock.hpp / Clock.cpp
---------------------

void Init()
	Performs initial set up of the chip's timer registers. Make sure that
	F_CPU is correctly configered in Clock.hpp to match the current
	oscillator settings. The class's accuracy is highly dependent on
	correct configuration and clock source
	
The clock / timer class is intended to quickly and easily create timers
throughout a program without having to create a long and complicated interrupt
vector. Create an instance of a Clock::Timer where needed and query it with
Clock::Timer::Elapsed() and Clock::Timer::Restart(). For example:

Clock::Timer myTimer;
float time = myTimer.Elapsed();
float cycleDuration = myTimer.Restart();



Wiznet5100.hpp / Wiznet5100.cpp
-------------------------------

The WizComm class contains static functions for initialising settings for a
WIZnet 5100 ethernet chip connected to an AVR (pre-defined ATMega8) via SPI.
Requires the serial class when sending debug data to an RS232 terminal.

void Init()
	Sets up the AVR SPI registers and transmits the IP address data saved
	on the EEPROM to the connected W5100. The hardware address must be set
	to a unique value before attempting to set up the connection.
	
void SPIWrite(regAddress, data)
	Writes the byte data to the W5100 register address regAddress via SPI.
	See the W5100 data sheet for full list of registers.
	
uint8_t SPIRead(regAddress)
	Returns the byte of data read at the W5100 register address regAddress,
	via SPI. See the w%100 data for full list of register addresses.
	
void SetRegisterData(regAddress, data, size)
	Writes a block of data to the W5100 register regAddress pointed to by
	data of size size, via SPI
	
void GetRegisterData(regAddress, data, size)
	Reads a block of data at W5100 register regAddress of size size and stores
	in an array pointed to by data via SPI.
	
void SetIpAddress(addr)
	Sets the W5100 IP Address and updates the AVR EEPROM with the data stored
	in addr which points to an array of 4 bytes representing an IP address.
	
void SetMacAddress(addr)
	Sets the W5100 hardware address and updates the AVR EEPROM with the data
	stored in addr which points to an array of 6 bytes represnting a unique
	hardware (MAC) address.
	
void SetGatewayAddress(addr)
	Sets the W5100 gateway address. See SetIpAddress().
	
void SetSubnetMask(addr).
	Sets the W5100 subnet mask. See SetIpAddress()
	
	
	
KeyPad.hpp / KeyPad.cpp
-----------------------

A group of static functions for use when interfacing with a keypad. The class 
assumes that the rows of the keypad are connected to an output of the ATmega,
and the columns are connected to an input. 

for example:
http://extremeelectronics.co.in/avrtutorials/images/Schematic_4x3_Keypad_AVR.gif

As with the other classes, configuration variables are found in the anonymous 
namespace at the top of KeyPad.cpp. The class implements an event queue, similar
to desktop environments, which must be polled for keypad events.

void Update()
	Must be called repteatedly from the main program loop to keep the event
	queue up to date.

bool KeyPressed(Key key);
	Returns true if key is currently pressed, false if otherwise.

bool PollEvent(Event& evt)
	Returns true while venets remain in the queue, and should be called until
	returns	false, to make sure all events are handled. Event data is place 
	in evt. For example:
	
	while(PollEvent(e))
	{
		if(e.type == KeyPad::Event::Type::KEY_PRESSED)
			printf("Key pressed: %s\n", e.valueAsChar);
			
		else if(e.type == KeyPad::Event::Type::KEY_RELEASED)
			printf("Key pressed: %d\n", e.valueAsInt);			
	}
	

List.hpp
--------

Implements a doubly linked list of type T. Similar to STL list, only with no
iterator support. Useful for FILO / LILO stack or queue behaviour of abitrary
types. Requires the EnableInheritance.hpp/cpp files to be included in the current
project, or new/delete operators to be otherwise defined. T must also have a valid
copy constructor as items are copied into the list, not moved (on the TODO list)

void PushFront(const T& val)
	Pushes a copy of val to the front of the list

void PopFront()
	Pops the current front value from the front of the list

T* Front()
	Returns a reference to the current front value or nullptr if list is empty

void PushBack(const T& val)
	Pushes a copy of val to the back of the list

void PopBack()
	Pops the backmost value at the end of the list

T* Back()
	Returns a reference to the back most value of the list

unsigned int Size()
	Returns the current size of the list.

NOTE: care should be taken when retaining references to items in the list as
popping the values will invalidate references leading to dangling pointers.